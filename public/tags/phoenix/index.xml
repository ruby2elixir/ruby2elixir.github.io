<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Phoenix on Ruby 2 Elixir Blog</title>
    <link>http://ruby2elixir.github.io/tags/phoenix.html</link>
    <description>Recent content in Phoenix on Ruby 2 Elixir Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Jan 2016 18:36:00 +0100</lastBuildDate>
    <atom:link href="http://ruby2elixir.github.io/tags/phoenix.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Setting Up Drone.IO CI for Elixir and Phoenix</title>
      <link>http://ruby2elixir.github.io/posts/2016/01-14-setting-up-drone.io-ci-for-elixir-and-phoenix.html</link>
      <pubDate>Thu, 14 Jan 2016 18:36:00 +0100</pubDate>
      
      <guid>http://ruby2elixir.github.io/posts/2016/01-14-setting-up-drone.io-ci-for-elixir-and-phoenix.html</guid>
      <description>

&lt;p&gt;Running your CI tests for opensource project on Travis.Ci seems like a no-brainer. Travis offers quite robust integration into Github and boasts with impressive feature set, that&amp;rsquo;s flexible and very convenient.&lt;/p&gt;

&lt;p&gt;But their offering for private projects is kinda steep, especially when you&amp;rsquo;re just starting out, like Steve Domin recently noticed.&lt;/p&gt;

&lt;!-- &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Wow, first &lt;a href=&#34;https://twitter.com/travisci&#34;&gt;@travisci&lt;/a&gt; paid plan starts at $129/mo. Definitely not an option for personal projects&lt;/p&gt;&amp;mdash; Steve Domin (@stevedomin) &lt;a href=&#34;https://twitter.com/stevedomin/status/695173772740026368&#34;&gt;February 4, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt; --&gt;










&lt;figure class=&#34;full_scale&#34;&gt;
    &lt;img class=&#34;
    
    &#34; src=&#34;http://ruby2elixir.github.io/media/posts/2016/tweet_travisci_private_expensive.png&#34;

    
    
    /&gt;
    &lt;figcaption&gt;
        
    &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;There are some great hosted alternatives that are cheaper and might work for you, like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://buddy.works/pricing&#34;&gt;https://buddy.works/pricing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://semaphoreci.com/pricing&#34;&gt;https://semaphoreci.com/pricing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://circleci.com/pricing/&#34;&gt;https://circleci.com/pricing/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://drone.io/pricing&#34;&gt;https://drone.io/pricing&lt;/a&gt; -&amp;gt; less expensive than jenkins+ec2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then there is always your trusted &lt;a href=&#34;https://jenkins-ci.org/&#34;&gt;Jenkins&lt;/a&gt; for old-style control-freaks, who like to host everything themselves.&lt;/p&gt;

&lt;p&gt;Is there another opensource solution?&lt;/p&gt;

&lt;p&gt;Indeed, there is. &lt;a href=&#34;https://drone.io/&#34;&gt;Drone.io&lt;/a&gt; (the last one in the alternatives list) also offers an &lt;a href=&#34;http://readme.drone.io/&#34;&gt;opensource version&lt;/a&gt; that you can host yourself. It was just recently endowed with a really cool matrix build feature.&lt;/p&gt;

&lt;!-- &lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Drone 0.4 has been released! Improved plugins, matrix builds, composed service containers &lt;a href=&#34;https://t.co/m3v4O5ibLJ&#34;&gt;https://t.co/m3v4O5ibLJ&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/docker?src=hash&#34;&gt;#docker&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/ci?src=hash&#34;&gt;#ci&lt;/a&gt;&lt;/p&gt;&amp;mdash; drone.io (@droneio) &lt;a href=&#34;https://twitter.com/droneio/status/689842872632246272&#34;&gt;January 20, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt; --&gt;










&lt;figure class=&#34;full_scale&#34;&gt;
    &lt;img class=&#34;
    
    &#34; src=&#34;http://ruby2elixir.github.io/media/posts/2016/tweet_droneio_matrix_build.png&#34;

    
    
    /&gt;
    &lt;figcaption&gt;
        
    &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;The information about it is scattered around and is sometimes a bit outdated, so here are some links to get you started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/droneio&#34;&gt;https://twitter.com/droneio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.drone.io/&#34;&gt;http://blog.drone.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://readme.drone.io/&#34;&gt;http://readme.drone.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Today we&amp;rsquo;re going to setup a CI for a Phoenix project hosted on Github (or Bitbucket, both at same time is not possible) with a ridiculous fast turn-around time and total cost of 10$/m + some initial time investment.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s gonna be a fun and rewarding experience, so let&amp;rsquo;s get started!&lt;/p&gt;

&lt;h3 id=&#34;requirements:b11a2c73716529ff1d7a5a8613a5808d&#34;&gt;Requirements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://digitalocean.com&#34;&gt;DigitalOcean account&lt;/a&gt; &amp;ndash;&amp;gt; &lt;a href=&#34;https://m.do.co/c/2f7f898f4040&#34;&gt;Get 10$ credit on signing up (referral link)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github account / Bitbucket account&lt;/li&gt;
&lt;li&gt;A Phoenix application, that you want to run CI for&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;setup-digital-ocean:b11a2c73716529ff1d7a5a8613a5808d&#34;&gt;Setup Digital Ocean&lt;/h3&gt;

&lt;p&gt;We could cheat here and just install one of the provides App-Images on Digital Ocean:&lt;/p&gt;










&lt;figure class=&#34;full_scale&#34;&gt;
    &lt;img class=&#34;
    
    &#34; src=&#34;http://ruby2elixir.github.io/media/posts/2016/drone_setup_digital_ocean_pick_one_click_vm.png&#34;

    
    
    /&gt;
    &lt;figcaption&gt;
        
    &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;hr&gt;

&lt;p&gt;If you want to have more details, it&amp;rsquo;s not that hard to install the real thing on a plain Ubuntu VM (&amp;gt; 14.04).&lt;/p&gt;

&lt;h4 id=&#34;install-docker-following-the-instructions-here-https-docs-docker-com-engine-installation-ubuntulinux:b11a2c73716529ff1d7a5a8613a5808d&#34;&gt;Install Docker following the instructions here: &lt;a href=&#34;https://docs.docker.com/engine/installation/ubuntulinux/&#34;&gt;https://docs.docker.com/engine/installation/ubuntulinux/&lt;/a&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;## we assume Ubuntu Trusty 14.04
# update APT sources
$ sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
$ sudo touch /etc/apt/sources.list.d/docker.list
$ sudo echo &amp;quot;deb https://apt.dockerproject.org/repo ubuntu-trusty main&amp;quot; &amp;gt; /etc/apt/sources.list.d/docker.list

## update sources
$ apt-get update

## install docker
$ sudo apt-get install docker-engine

## start docker daemon
$ sudo service docker start

## test that it was installed
$ sudo docker run hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;install-drone-io-following-the-instructions-here-http-readme-drone-io-setup-overview:b11a2c73716529ff1d7a5a8613a5808d&#34;&gt;Install Drone.io following the instructions here: &lt;a href=&#34;http://readme.drone.io/setup/overview/&#34;&gt;http://readme.drone.io/setup/overview/&lt;/a&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo docker pull drone/drone:0.4
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;configure-github-application:b11a2c73716529ff1d7a5a8613a5808d&#34;&gt;Configure Github Application&lt;/h4&gt;

&lt;p&gt;Github Setting -&amp;gt; Applications -&amp;gt; Developer Applications (&lt;a href=&#34;https://github.com/settings/developers&#34;&gt;https://github.com/settings/developers&lt;/a&gt;)&lt;/p&gt;










&lt;figure class=&#34;full_scale&#34;&gt;
    &lt;img class=&#34;
    
    &#34; src=&#34;http://ruby2elixir.github.io/media/posts/2016/drone_setup_github_register_new_application.png&#34;

    
     width=&#34;550&#34; 
    /&gt;
    &lt;figcaption&gt;
        
    &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;Application Name: Drone CI&lt;/li&gt;
&lt;li&gt;Homepage URL: IP from you DO Droplet, like: &lt;a href=&#34;http://111.11.111.11/&#34;&gt;http://111.11.111.11/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Authorization callback URL: &lt;a href=&#34;http://111.11.111.11/authorize&#34;&gt;http://111.11.111.11/authorize&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;










&lt;figure class=&#34;full_scale&#34;&gt;
    &lt;img class=&#34;
    
    &#34; src=&#34;http://ruby2elixir.github.io/media/posts/2016/drone_setup_github_application_data.png&#34;

    
     width=&#34;550&#34; 
    /&gt;
    &lt;figcaption&gt;
        
    &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;h4 id=&#34;contunue-drone-io-configuration:b11a2c73716529ff1d7a5a8613a5808d&#34;&gt;Contunue Drone.io Configuration&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo mkdir -p /etc/drone/
$ sudo vim /etc/drone/dronerc
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;REMOTE_DRIVER=github
REMOTE_CONFIG=https://github.com?client_id=XXXX&amp;amp;client_secret=XXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# now start your Drone.io container
sudo docker run \
  --volume /var/lib/drone:/var/lib/drone \
  --volume /var/run/docker.sock:/var/run/docker.sock \
  --env-file /etc/drone/dronerc \
  --restart=always \
  --publish=80:8000 \
  --detach=true \
  --name=drone \
  drone/drone:0.4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open in the browser the IP of your Drone DO Droplet and after a short authorization you will be greated with a list of your projects on Github.&lt;/p&gt;

&lt;h3 id=&#34;auth-github:b11a2c73716529ff1d7a5a8613a5808d&#34;&gt;Auth Github&lt;/h3&gt;










&lt;figure class=&#34;full_scale&#34;&gt;
    &lt;img class=&#34;
    
    &#34; src=&#34;http://ruby2elixir.github.io/media/posts/2016/drone_setup_github_drone_authorization.png&#34;

    
     width=&#34;550&#34; 
    /&gt;
    &lt;figcaption&gt;
        
    &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;h3 id=&#34;list-of-projects:b11a2c73716529ff1d7a5a8613a5808d&#34;&gt;List of projects&lt;/h3&gt;










&lt;figure class=&#34;full_scale&#34;&gt;
    &lt;img class=&#34;
    
    &#34; src=&#34;http://ruby2elixir.github.io/media/posts/2016/drone_setup_projects_dropdown.png&#34;

    
     width=&#34;550&#34; 
    /&gt;
    &lt;figcaption&gt;
        
    &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;h3 id=&#34;configure-a-phoenix-project-to-work-with-drone:b11a2c73716529ff1d7a5a8613a5808d&#34;&gt;Configure a Phoenix project to work with Drone&lt;/h3&gt;

&lt;p&gt;Now we are ready to setup our project to run on Drone.io. In similar fashion to Travis.ci it reads its configuration from a YAML file named  &lt;code&gt;.drone.yml&lt;/code&gt; in the root of the project.&lt;/p&gt;

&lt;p&gt;The simplest config for an Elixir project would look like that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat .drone.yml
build:
  image: bitwalker/alpine-elixir-phoenix:2.0
  commands:
    - mix deps.get
    - mix test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would be enough to run a tests for a simple library.&lt;/p&gt;

&lt;p&gt;To run tests for a &lt;strong&gt;Phoenix project&lt;/strong&gt; we need to specify a little bit more.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;d like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a Postgres database server&lt;/li&gt;
&lt;li&gt;caching for dependencies (so we don&amp;rsquo;t have to compile them everytime our build runs)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also in the current version of Ecto (1.1.3 ) it relies on &lt;strong&gt;psql&lt;/strong&gt; binary to be present to run the mix commands for DB creation + DB migration.&lt;/p&gt;

&lt;p&gt;This dependency will be removed in the upcoming version 2.0, see pull request: &lt;a href=&#34;https://github.com/elixir-lang/ecto/pull/1163&#34;&gt;https://github.com/elixir-lang/ecto/pull/1163&lt;/a&gt; - Switch pg storage management away from psql&lt;/p&gt;

&lt;p&gt;To make it even more interesting we&amp;rsquo;re gonna use an umbrella project with two Phoenix apps with different DB configurations. Somehow there is a bug here, so that the &lt;strong&gt;ecto.migrate&lt;/strong&gt; for one of the databases is not executed during a normal &lt;strong&gt;mix test&lt;/strong&gt; run. As a workaround I run the commands explicitly before tests.&lt;/p&gt;

&lt;p&gt;So, to recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install postgresql-client (so psql is present)&lt;/li&gt;
&lt;li&gt;run ecto.migrate for both test DBs&lt;/li&gt;
&lt;li&gt;use PosgreSQL Docker image in compose block&lt;/li&gt;
&lt;li&gt;cache the dependencies + the _build folder (maybe too fragile, needs real life experience over long time&amp;hellip;)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat .drone.yml
cache:
  mount:
    - _build
    - deps

build:
  image: bitwalker/alpine-elixir-phoenix:2.0
  commands:
    - apk update
    - apk add postgresql-client
    - mix deps.get
    - MIX_ENV=test mix ecto.create  -r Back.Repo
    - MIX_ENV=test mix ecto.migrate -r Back.Repo
    - MIX_ENV=test mix ecto.create ecto.migrate -r Front.Repo
    - mix test

compose:
  database:
    image: postgres:9.5
    environment:
    - POSTGRES_USER=postgres
    - POSTGRES_PASSWORD=postgres
    - POSTGRES_DB=postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the example application, that we&amp;rsquo;re going to test - &lt;a href=&#34;https://github.com/ruby2elixir/phoenix_crud_benchmark_60_controllers&#34;&gt;https://github.com/ruby2elixir/phoenix_crud_benchmark_60_controllers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It executes full real CRUD controller tests for 60 controllers in one application.&lt;/p&gt;

&lt;p&gt;An uncached initial CI test take something around 2 minutes.









&lt;figure class=&#34;full_scale&#34;&gt;
    &lt;img class=&#34;
    
    &#34; src=&#34;http://ruby2elixir.github.io/media/posts/2016/drone_setup_drone_uncached_run.png&#34;

    
     width=&#34;550&#34; 
    /&gt;
    &lt;figcaption&gt;
        
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;After we have some &amp;ldquo;warm&amp;rdquo; caches, it takes less than 1m 15sec to get feedback. For 60 real controllers with DB tests ;)&lt;/p&gt;

&lt;p&gt;








&lt;figure class=&#34;full_scale&#34;&gt;
    &lt;img class=&#34;
    
    &#34; src=&#34;http://ruby2elixir.github.io/media/posts/2016/drone_setup_failed_build_with_timing.png&#34;

    
     width=&#34;550&#34; 
    /&gt;
    &lt;figcaption&gt;
        
    &lt;/figcaption&gt;
&lt;/figure&gt;










&lt;figure class=&#34;full_scale&#34;&gt;
    &lt;img class=&#34;
    
    &#34; src=&#34;http://ruby2elixir.github.io/media/posts/2016/drone_setup_fixed_build_with_timing.png&#34;

    
     width=&#34;550&#34; 
    /&gt;
    &lt;figcaption&gt;
        
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Those initial results make me smile. A broken build in the evening is much faster to fix if it takes only a few minutes to get the results back.&lt;/p&gt;

&lt;p&gt;Also you don&amp;rsquo;t have to break the bank to foster best practices for running Continious Integration on a tight budget.&lt;/p&gt;

&lt;p&gt;Please leave any feedback whether you&amp;rsquo;ve found that article helpful or if there are some improvements / mistakes.&lt;/p&gt;

&lt;p&gt;Best,
Roman&lt;/p&gt;

&lt;hr&gt;

&lt;h4 id=&#34;more-links-about-drone-io:b11a2c73716529ff1d7a5a8613a5808d&#34;&gt;More links about Drone.io:&lt;/h4&gt;

&lt;p&gt;Plugins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://addons.drone.io/&#34;&gt;http://addons.drone.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drone-plugins&#34;&gt;https://github.com/drone-plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Community:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitter.im/drone/drone&#34;&gt;https://gitter.im/drone/drone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://discuss.drone.io/&#34;&gt;https://discuss.drone.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drone-demos/drone-with-elixir&#34;&gt;https://github.com/drone-demos/drone-with-elixir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Webpack Hot-Reloading with Phoenix</title>
      <link>http://ruby2elixir.github.io/posts/2016/01-14-webpack-hot-reloading-with-phoenix.html</link>
      <pubDate>Thu, 14 Jan 2016 18:36:00 +0100</pubDate>
      
      <guid>http://ruby2elixir.github.io/posts/2016/01-14-webpack-hot-reloading-with-phoenix.html</guid>
      <description>

&lt;blockquote&gt;
  this is just a reminder without proper comments...
&lt;/blockquote&gt;

&lt;h3 id=&#34;steps-to-enable-webpack-hot-reloding-in-phoenix:4265bc156c36d01e73c56df1cd691262&#34;&gt;Steps to enable Webpack + hot-reloding in Phoenix:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Router: add routes for webpack controller (proxy)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;if Mix.env == :dev do
  scope &amp;quot;/static&amp;quot;, Front do
    pipe_through :api
    get &amp;quot;/:req&amp;quot;, WebPackController, :hot_update
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Webpack Proxy Controller (web/controllers/web_pack_controller.ex)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defmodule Front.WebPackController do
  use Phoenix.Controller
  @webpack_url &amp;quot;http://localhost:3000/static/&amp;quot;

  def hot_update(conn, params) do
    req = Map.get(params, &amp;quot;req&amp;quot;)
    res = HTTPoison.get! @webpack_url &amp;lt;&amp;gt; req
    text conn, res.body
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Endpoint: adjust static Plug to include webpack&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;    plug Plug.Static,
      at: &amp;quot;/&amp;quot;, from: :back, gzip: false,
      only: ~w(css fonts images js webpack favicon.ico robots.txt)

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Config: dev.exs - configure watchers:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;webpack_args = [Path.expand(&amp;quot;assets/node_modules/.bin/webpack-dev-server&amp;quot;),
    &amp;quot;--port=3000&amp;quot;,
    &amp;quot;--history-api-fallback&amp;quot;,
    &amp;quot;--hot&amp;quot;,
    &amp;quot;--progress&amp;quot;,
    &amp;quot;--inline&amp;quot;,
    &amp;quot;--colors&amp;quot;,
    &amp;quot;--stdin&amp;quot;, ## so it will stop, when stdin from phoenix is closed
               ## requires  https://github.com/webpack/webpack-dev-server/pull/352/files --&amp;gt; stdin, so probably &amp;gt;= 1.14.2
]
if IEx.started?, do: webpack_args = List.delete(webpack_args, &amp;quot;--progress&amp;quot;)

config :front, Front.Endpoint,
  http: [port: 4000],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  root: Path.expand(&amp;quot;..&amp;quot;, __DIR__) &amp;lt;&amp;gt; &amp;quot;/assets&amp;quot;, #we need to be in the assets folder...
  watchers: [
    &amp;quot;node&amp;quot;: webpack_args,
  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Mix: add task for asset digesting (lib/mix/tasks.ex)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defmodule Mix.Tasks.MyApp.Digest do
  use Mix.Task

  def run(args) do
    Mix.Shell.IO.cmd &amp;quot;cd assets &amp;amp;&amp;amp; npm run build&amp;quot;
    :ok = Mix.Tasks.Phoenix.Digest.run(args)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;in mix.exs
defp aliases do
  [
    ....#
    &amp;quot;phoenix.digest&amp;quot;: [&amp;quot;my_app.digest&amp;quot;]
  ]
end

# add :httpoison to be started
defp applications(:dev) do
  [:httpoison] + applications(:prod)
end

defp applications(_) do
  [....]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Views

&lt;ul&gt;
&lt;li&gt;layout_view.ex&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defmodule Front.LayoutView do
  use Front.Web, :view

  def styles_bundle(conn) do
    make_path(conn, &amp;quot;vendor_styles-bundle.js&amp;quot;)
  end

  def js_bundle(conn) do
    make_path(conn, &amp;quot;js-bundle.js&amp;quot;)
  end

  # enables hot-reloadable URLs in development
  defp make_path(conn, asset) do
    if Mix.env == :dev do
      &amp;quot;http://localhost:3000/static/&amp;quot; &amp;lt;&amp;gt; asset
    else
      Front.Router.Helpers.static_path(conn, &amp;quot;/webpack/&amp;quot; &amp;lt;&amp;gt; asset)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;templates:
  - use helpers in layout&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;author&amp;quot; content=&amp;quot;&amp;quot;&amp;gt;

    &amp;lt;title&amp;gt;Front - React&amp;lt;/title&amp;gt;
    &amp;lt;script src=&amp;quot;&amp;lt;%= styles_bundle(@conn) %&amp;gt;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;root&amp;quot; class=&amp;quot;container&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt; &amp;lt;!-- /container --&amp;gt;
    &amp;lt;script src=&#39;&amp;lt;%= js_bundle(@conn) %&amp;gt;&#39;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gotchas:4265bc156c36d01e73c56df1cd691262&#34;&gt;Gotchas:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Error: ENOENT: no such file or directory, open &#39;.../node_modules/webpack-dev-server/client/live.bundle.js&#39;
at Error (native)

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/webpack/webpack-dev-server/issues/59&#34;&gt;https://github.com/webpack/webpack-dev-server/issues/59&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd node_modules/webpack-dev-server &amp;amp;&amp;amp; npm run-script prepublish
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Chris McCord on Meteorclub</title>
      <link>http://ruby2elixir.github.io/posts/2015/12-25-chris-mccord-on-meteorclub.html</link>
      <pubDate>Fri, 25 Dec 2015 18:36:00 +0100</pubDate>
      
      <guid>http://ruby2elixir.github.io/posts/2015/12-25-chris-mccord-on-meteorclub.html</guid>
      <description>

&lt;p&gt;Recently I&amp;rsquo;ve listened to Chris McCord explaining Phoenix + Elixir on Meteorclub where he talks about the surprising code base stability for Phoenix.&lt;/p&gt;

&lt;h3 id=&#34;what-are-phoenix-elixir-and-why-should-i-care-meteor-club-podcast-https-simplecast-fm-s-2f11905f:03baf0baf002209b5b8e1c3bdc4fcfc5&#34;&gt;What are Phoenix &amp;amp; Elixir and why should I care? - Meteor Club Podcast - &lt;a href=&#34;https://simplecast.fm/s/2f11905f&#34;&gt;https://simplecast.fm/s/2f11905f&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;from 25:00&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
The first 2 weeks you&#39;re gonna be like ... &#34;I hate this! This is stupid!&#34; When I got into Elixir I couldn&#39;t do a recursive loop. I was going through the &#34;Programming Elixir&#34; book and I was like... &#34;I can&#39;t program! I have a programing degree and I can&#39;t .... &#34; So it takes a while but then, once it clicks.. Oh my... This is the best thing ever.
&lt;/p&gt;
&lt;p&gt;
And now trying to go back to Ruby or object oriented languages ... It just does not feel right. But it takes a little bit. I think the community has done a great job. Saying that we know there is this frustration gap to be filled so... Like we&#39;re very helpful to newcomers and noob style questions. The more the merrier.
&lt;/p&gt;
...
&lt;p&gt;
We have quite a small core team, there is 5 of us. And Jose Valim is also on the core team. That has been an enormous boost. He probably has half of commits in Phoenix . But still, quite a small core team. We&#39;re actually shocked...
&lt;/p&gt;
&lt;p&gt;
The few issues that we do have.... So we expected with 1.0 that we&#39;ll have a lot more issues to takle. People are using the framework, companies are using it... Not to like, pat us on the back, but it&#39;s been surprisingly stable. Surprisingly few problems have come up.
&lt;/p&gt;
&lt;p&gt;So for me personally it&#39;s like... You buy into &#34;kool-aid&#34;.... You do, there is no reason not to.   It&#39;s unavoidable. The interesting thing for me is like functional programming
&lt;/p&gt;

&lt;p&gt;
Every step building Phoenix is like... The hype has lived up to the reality. (27:00) Every new feature we write like we wrote the Phoenix HTML layer... Jose and I like walking through the code... &#34;Where is all the code? &#34;
&lt;/p&gt;

&lt;p&gt;
It was shockingly small amount of code and we have a lot fewer issues than we expected.
I think there are 5 open issues or 6 open pull issues on Phoenix right now.
&lt;/p&gt;


&lt;p&gt;
And people are using it!
&lt;/p&gt;
&lt;p&gt;
So far it&#39;s been a good ride!
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So&amp;hellip; This is really one of the most compelling reasons for me to use Elixir: if you got your abstractions right, the code that you write is suprisingly stable and maintainable. It&amp;rsquo;s hard to explain with words, you have really to experience this by trying it youself.&lt;/p&gt;

&lt;p&gt;Maybe this will give you just enough nudge to read the sourcecode for Phoenix and play with it.&lt;/p&gt;

&lt;p&gt;Have a nice day!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>