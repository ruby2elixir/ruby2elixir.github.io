<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby 2 Elixir Blog</title>
    <link>http://ruby2elixir.github.io/</link>
    <description>Recent content on Ruby 2 Elixir Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Dec 2015 18:36:00 +0100</lastBuildDate>
    <atom:link href="http://ruby2elixir.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Elixir vs Ruby - Code quality</title>
      <link>http://ruby2elixir.github.io/posts/2015/12-17-elixir-vs-ruby---code-quality.html</link>
      <pubDate>Thu, 17 Dec 2015 18:36:00 +0100</pubDate>
      
      <guid>http://ruby2elixir.github.io/posts/2015/12-17-elixir-vs-ruby---code-quality.html</guid>
      <description>

&lt;p&gt;A non-scientific and quick comparison of code quality between Ruby and Elixir ecosystems.&lt;/p&gt;

&lt;p&gt;This is just a snapshot in time of current bugs / issues for each language + the most prominent web framework in that ecosystem. Yeah, in theory they should not be related, but in practice it plays a huge role in driving developer adoption if you get the web framework right, so we consider it too.&lt;/p&gt;

&lt;h3 id=&#34;elixir:248cf1be2829ed759d637ae6d7112e9b&#34;&gt;Elixir&lt;/h3&gt;



&lt;figure &gt;
    &lt;img src=&#34;http://ruby2elixir.github.io/media/posts/2015/status_elixir_20151217.png&#34; /&gt;
    &lt;figcaption&gt;
        
    &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;Issues: 32, Pull Requests: 7&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;phoenix:248cf1be2829ed759d637ae6d7112e9b&#34;&gt;Phoenix&lt;/h3&gt;



&lt;figure &gt;
    &lt;img src=&#34;http://ruby2elixir.github.io/media/posts/2015/status_phoenix_20151217.png&#34; /&gt;
    &lt;figcaption&gt;
        
    &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;Issues: 5, Pull Requests: 2&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;ecto:248cf1be2829ed759d637ae6d7112e9b&#34;&gt;Ecto&lt;/h3&gt;



&lt;figure &gt;
    &lt;img src=&#34;http://ruby2elixir.github.io/media/posts/2015/status_phoenix_20151217.png&#34; /&gt;
    &lt;figcaption&gt;
        
    &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;Issues: 22, Pull Requests: 6&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;erlang-bugs-are-kinda-hard-to-find-and-report-http-bugs-erlang-org-secure-dashboard-jspa:248cf1be2829ed759d637ae6d7112e9b&#34;&gt;Erlang (Bugs are kinda hard to find and report - &lt;a href=&#34;http://bugs.erlang.org/secure/Dashboard.jspa&#34;&gt;http://bugs.erlang.org/secure/Dashboard.jspa&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;

&lt;figure &gt;
    &lt;img src=&#34;http://ruby2elixir.github.io/media/posts/2015/status_erlang_20151217.png&#34; /&gt;
    &lt;figcaption&gt;
        
    &lt;/figcaption&gt;
&lt;/figure&gt;



&lt;figure &gt;
    &lt;img src=&#34;http://ruby2elixir.github.io/media/posts/2015/status_erlang_github_20151217.png&#34; /&gt;
    &lt;figcaption&gt;
        
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Issues: 16, Pull Requests: 69&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;ruby:248cf1be2829ed759d637ae6d7112e9b&#34;&gt;Ruby&lt;/h3&gt;

&lt;p&gt;

&lt;figure &gt;
    &lt;img src=&#34;http://ruby2elixir.github.io/media/posts/2015/status_ruby_20151217.png&#34; /&gt;
    &lt;figcaption&gt;
        
    &lt;/figcaption&gt;
&lt;/figure&gt;



&lt;figure &gt;
    &lt;img src=&#34;http://ruby2elixir.github.io/media/posts/2015/status_ruby_github_20151217.png&#34; /&gt;
    &lt;figcaption&gt;
        
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Issues (only bugs): 871, Pull Requests: 119&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;rails:248cf1be2829ed759d637ae6d7112e9b&#34;&gt;Rails&lt;/h3&gt;



&lt;figure &gt;
    &lt;img src=&#34;http://ruby2elixir.github.io/media/posts/2015/status_rails_20151217.png&#34; /&gt;
    &lt;figcaption&gt;
        
    &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;p&gt;Issues: 412, Pull Requests: 464&lt;/p&gt;

&lt;h2 id=&#34;summary:248cf1be2829ed759d637ae6d7112e9b&#34;&gt;Summary:&lt;/h2&gt;

&lt;h5 id=&#34;erlang-elixir-phoenix-ecto:248cf1be2829ed759d637ae6d7112e9b&#34;&gt;Erlang + Elixir + Phoenix + Ecto&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;(32+5+16+22)   = &lt;strong&gt;75 Issues&lt;/strong&gt;,   (7+2+69+6) = &lt;strong&gt;84 Pull Requests&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;ruby-rails:248cf1be2829ed759d637ae6d7112e9b&#34;&gt;Ruby + Rails:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;(871 + 412) = &lt;strong&gt;1283 Issues&lt;/strong&gt;, (119 + 464) = &lt;strong&gt;583 Pull Requests&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to draw your own conclusions on presented facts. I&amp;rsquo;m biased and you should be careful just taking my words as the only valid perspective.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll try my short resume:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Because of the functional nature of Elixir the resulting code makes &lt;strong&gt;bugs easier to find and fix&lt;/strong&gt;, while at the same time the Erlang VM makes &lt;strong&gt;fast and highly robust unit tests possible&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The language designer (Jose Valim) is also shaping the web framework, that results in &lt;strong&gt;high cohesion and interdependent influence of Elixir and Phoenix&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Considered alone any of those facts does not make a big difference, but combined they allow to reach &lt;strong&gt;extraordinary developer productivity without sacrificing code quality in long term&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Elixir provides a unique and unprecedented opportunity for any web developer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prolific, energetic and humble language designer who left one of the &amp;ldquo;hottest&amp;rdquo; developer communities to build the language for future web applications&lt;/li&gt;
&lt;li&gt;battle-tested and highly optimized for robust distributed soft-realtime systems runtime (BEAM - Erlang VM)&lt;/li&gt;
&lt;li&gt;huge focus on developer happiness&lt;/li&gt;
&lt;li&gt;makes the right trade-offs between easy and simple, so you can always build more complex systems by combining simpler blocks&lt;/li&gt;
&lt;li&gt;fanatic and enthusiastic developer community, welcoming beginners and making sure you get that experience of success by small baby steps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many developers are afraid when they hear the word &amp;ldquo;functional programming&amp;rdquo;&amp;hellip; You shouldn&amp;rsquo;t be.&lt;/p&gt;

&lt;p&gt;Just go to &lt;a href=&#34;http://elixir-lang.org/&#34;&gt;http://elixir-lang.org/&lt;/a&gt; and try it out.&lt;/p&gt;

&lt;p&gt;It takes only 5 minutes to run your first Elixir code.&lt;/p&gt;

&lt;p&gt;Watch videos, work with tutorials.&lt;/p&gt;

&lt;p&gt;Ask questions on Slack.&lt;/p&gt;

&lt;p&gt;Become active contributer.&lt;/p&gt;

&lt;p&gt;Solve your next problem with Elixir and be amazed, how it shapes your thinking.&lt;/p&gt;

&lt;p&gt;Be prepared for the multi-core, parallel, concurrent, real-time future of software development! Don&amp;rsquo;t miss out, it will be here faster than you think!&lt;/p&gt;

&lt;p&gt;All the best,
Roman&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why Even Bother to Rewrite Your Rails Application in Elixir</title>
      <link>http://ruby2elixir.github.io/posts/2015/11-25-why-even-bother-to-rewrite-your-rails-application-in-elixir.html</link>
      <pubDate>Wed, 25 Nov 2015 18:36:00 +0100</pubDate>
      
      <guid>http://ruby2elixir.github.io/posts/2015/11-25-why-even-bother-to-rewrite-your-rails-application-in-elixir.html</guid>
      <description>&lt;p&gt;Hey there, I believe that our future as web software development is going to change soon.
There is a lot of ways to write software and I have chosen to write web applications. My goal is to build my own SaaS business soon and be responsible for it. When you have that perspective you treat any superficial level of complexity as unacceptable.&lt;/p&gt;

&lt;p&gt;This is the reason why in 2007 I have learned Ruby and why I wrote my first web applications in Rails. I had to be able to maintain my applications in the long run. To peek behind the curtain, I chose a path of apprenticeship and joined a then young startup named DaWanda and watched it grow from 12 people to 200 people. It grew from a single largish Rails app deployed on 5 dedicated server to a beast of multiple apps with slow test suites and plenty of moving parts&amp;hellip; To keep the thing running required quite a lot mental effort and it was a dedicated job in itself. You build &lt;strong&gt;abstractions upon abstractions and depend on a hefty amount of third-party libraries just to keep your application alive&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Timeouts, network partitions, lots of small inconsistencies, memory leaks, hanging processes&lt;/strong&gt; : it all becomes your daily business.&lt;/p&gt;

&lt;p&gt;This is not how I envision my own applications in the future&amp;hellip; They should &lt;strong&gt;fit into my little brain&lt;/strong&gt;. They should grow with grace, be maintainable, resource-efficient, provide just the right abstractions to help me in the beginning, but &lt;strong&gt;get out of the way when I&amp;rsquo;m going against recommendations&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Playing with different languages showed some promise, but the lost productivity compared to Rails was hard to justify.&lt;/p&gt;

&lt;p&gt;That is until Elixir + Phoenix happened.&lt;/p&gt;

&lt;p&gt;It was not an instant insight, rather a slow process. You discover the author&amp;rsquo;s intents while solving small problems, you gather all the small bits of wisdom in discussions, you always ask the same question: &amp;ldquo;Where is the catch? It this too good to be true?&amp;rdquo;. So, I&amp;rsquo;m a careful &amp;ldquo;buyer&amp;rdquo; into new technogy, there is just too much &amp;ldquo;innovation&amp;rdquo; happening right now.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m &lt;strong&gt;in this game for a long run&lt;/strong&gt;, so &lt;strong&gt;cutting corners in the beginning only to slow down in the future&lt;/strong&gt; is not an option.&lt;/p&gt;

&lt;p&gt;I also don&amp;rsquo;t want to buy into the &amp;ldquo;microservices&amp;rdquo; craziness that is all the range right now, you need many teams to compensate the trade-offs of that approach.&lt;/p&gt;

&lt;p&gt;I want a technology that will help me to ship products with certain guarantees.&lt;/p&gt;

&lt;p&gt;It should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;be easily composable&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;scale vertically&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;scale horizontally&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;be reliable&lt;/li&gt;
&lt;li&gt;be introspectable&lt;/li&gt;
&lt;li&gt;have great tooling&lt;/li&gt;
&lt;li&gt;provide &lt;strong&gt;productivity during development&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;provide &lt;strong&gt;productivity during production&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am absolutely sure that &lt;strong&gt;Elixir/OTP&lt;/strong&gt; is currently &lt;strong&gt;THE ONLY LANGUAGE / PLATFORM&lt;/strong&gt; that gives you all that in a nice package.&lt;/p&gt;

&lt;p&gt;But it is hard to convince fellow developers when they see their cozy &amp;ldquo;Ruby&amp;rdquo; world threatened. &amp;ldquo;Why?&amp;rdquo; they say. &amp;ldquo;I&amp;rsquo;m totally fine with Rails. It solves my problems and that&amp;rsquo;s enough.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Well&amp;hellip; The world is evolving. The applications of future demand to be more reliable, more realtime, much faster, cope with much more traffic from many more devices than today.&lt;/p&gt;

&lt;p&gt;Rails offers no solution for distributed systems - embrace the &lt;strong&gt;majestic monolith&lt;/strong&gt;. No solution for concurrent systems - &lt;strong&gt;background jobs as a poor abstraction&lt;/strong&gt; e.g Sidekiq. No reliable solution for realtime systems - &lt;strong&gt;ActionCable is a hack&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And it is not Rails&amp;rsquo; fault, really. Ruby as a Virtual Machine helps you in the beginning, but &lt;strong&gt;hinders you when your application matures&lt;/strong&gt;. When you outgrow that single Rails app. When it&amp;rsquo;s time to break it apart. Be prepared for the &lt;strong&gt;zoo of technologies&lt;/strong&gt; just to keep it somehow alive. And let me tell you one thing: you will probably never feel like you control the system.&lt;/p&gt;

&lt;p&gt;But it&amp;rsquo;s ok, you will earn money with it. And Rails is not dying, as some might say.&lt;/p&gt;

&lt;p&gt;It just got&amp;hellip; Well&amp;hellip; Old.&lt;/p&gt;

&lt;p&gt;Not appropriate for the future we are about to face.&lt;/p&gt;

&lt;p&gt;Ambitious, demanding apps require modern tooling and new approaches. The world is realtime.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://ruby2elixir.github.io/about.html</link>
      <pubDate>Tue, 24 Nov 2015 18:35:51 +0100</pubDate>
      
      <guid>http://ruby2elixir.github.io/about.html</guid>
      <description>&lt;p&gt;An initiative to help you move your Rails application to Elixir&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>